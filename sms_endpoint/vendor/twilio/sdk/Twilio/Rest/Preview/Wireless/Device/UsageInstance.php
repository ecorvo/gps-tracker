<?php

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0
 * /       /
 */

namespace Twilio\Rest\Preview\Wireless\Device;

use Twilio\Exceptions\TwilioException;
use Twilio\InstanceResource;
use Twilio\Version;

/**
 * @property string deviceSid
 * @property string deviceAlias
 * @property string accountSid
 * @property string period
 * @property string commandsUsage
 * @property string commandsCosts
 * @property string dataUsage
 * @property string dataCosts
 * @property string url
 */
class UsageInstance extends InstanceResource {
    /**
     * Initialize the UsageInstance
     * 
     * @param \Twilio\Version $version Version that contains the resource
     * @param mixed[] $payload The response payload
     * @param string $deviceSid The device_sid
     * @return \Twilio\Rest\Preview\Wireless\Device\UsageInstance 
     */
    public function __construct(Version $version, array $payload, $deviceSid) {
        parent::__construct($version);
        
        // Marshaled Properties
        $this->properties = array(
            'deviceSid' => $payload['device_sid'],
            'deviceAlias' => $payload['device_alias'],
            'accountSid' => $payload['account_sid'],
            'period' => $payload['period'],
            'commandsUsage' => $payload['commands_usage'],
            'commandsCosts' => $payload['commands_costs'],
            'dataUsage' => $payload['data_usage'],
            'dataCosts' => $payload['data_costs'],
            'url' => $payload['url'],
        );
        
        $this->solution = array(
            'deviceSid' => $deviceSid,
        );
    }

    /**
     * Generate an instance context for the instance, the context is capable of
     * performing various actions.  All instance actions are proxied to the context
     * 
     * @return \Twilio\Rest\Preview\Wireless\Device\UsageContext Context for this
     *                                                           UsageInstance
     */
    protected function proxy() {
        if (!$this->context) {
            $this->context = new UsageContext(
                $this->version,
                $this->solution['deviceSid']
            );
        }
        
        return $this->context;
    }

    /**
     * Fetch a UsageInstance
     * 
     * @param array $options Optional Arguments
     * @return UsageInstance Fetched UsageInstance
     */
    public function fetch(array $options = array()) {
        return $this->proxy()->fetch(
            $options
        );
    }

    /**
     * Magic getter to access properties
     * 
     * @param string $name Property to access
     * @return mixed The requested property
     * @throws TwilioException For unknown properties
     */
    public function __get($name) {
        if (array_key_exists($name, $this->properties)) {
            return $this->properties[$name];
        }
        
        if (property_exists($this, '_' . $name)) {
            $method = 'get' . ucfirst($name);
            return $this->$method();
        }
        
        throw new TwilioException('Unknown property: ' . $name);
    }

    /**
     * Provide a friendly representation
     * 
     * @return string Machine friendly representation
     */
    public function __toString() {
        $context = array();
        foreach ($this->solution as $key => $value) {
            $context[] = "$key=$value";
        }
        return '[Twilio.Preview.Wireless.UsageInstance ' . implode(' ', $context) . ']';
    }
}